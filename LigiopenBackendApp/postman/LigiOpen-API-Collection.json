{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-ab12-cd3456ef7890",
		"name": "LigiOpen API Collection v3.2",
		"description": "# LigiOpen - Comprehensive Football League Management System for Kenya\n\nThis collection contains all API endpoints for the LigiOpen system, designed specifically for Kenya's diverse football ecosystem.\n\n## üìã Collection Overview (Sprint 2 COMPLETED)\n\n### üîê Authentication & Authorization ‚úÖ\n- JWT authentication with refresh tokens\n- Google OAuth2 integration\n- Email verification system\n- Password reset functionality\n\n### üë§ User Profile Management ‚úÖ\n- Complete user profile CRUD operations\n- Profile picture upload with Digital Ocean Spaces\n- User preferences and settings management\n- Account management features\n\n### üèõÔ∏è Club Management System ‚úÖ (52+ Endpoints)\n- **Unified Registration**: Single endpoint supporting both grassroots and FKF clubs\n- **FKF Promotion**: Grassroots clubs can upgrade to official FKF status\n- **Club Profiles**: Complete CRUD operations with media management\n- **Staff Management**: Comprehensive invitation and role management system\n- **Club Relationships**: User-club favorites with popularity tracking\n- **Advanced Search**: Name, county, region, level, and proximity-based discovery\n- **Dual Verification**: LigiOpen internal + FKF official verification workflows\n- **Geographic Integration**: Kenya's 47-county system with regional organization\n\n### üåç Location & Infrastructure ‚úÖ\n- **Kenyan Counties**: All 47 counties with regional data integration\n- **Stadium Management**: Complete venue information system (interface ready)\n- **Geographic Search**: Location-based club and venue discovery with Haversine formula\n\n### üéØ Sprint 2 Achievements (COMPLETED)\n- **4 Major Controller Areas**: Registration, Profile, Staff, Relationships\n- **52+ API Endpoints** across comprehensive club management\n- **Dual Verification Workflows**: Internal + external verification processes\n- **Professional Staff Management**: Owner/Manager hierarchy with invitations\n- **Advanced Club Search**: Multiple search criteria with pagination\n- **Media Management**: Club branding with Digital Ocean Spaces integration\n- **Permission System**: Owner/Manager/Admin role-based access control\n\n## üöÄ Getting Started\n\n### 1. Environment Setup\n- Set the `base_url` variable to your server URL (default: `http://localhost:8000`)\n- The `jwt_token` variable will be automatically set after login\n- `club_id` and other IDs are automatically captured from responses\n\n### 2. Authentication Flow\n1. **Register** a new account using the signup endpoint\n2. **Verify** your email (check console logs for verification link)\n3. **Login** to get JWT token (automatically saved to environment)\n4. Use **protected endpoints** with the JWT token\n\n### 3. Complete API Testing Workflow\n1. **Authentication**: Register ‚Üí Verify Email ‚Üí Login ‚Üí Get JWT Token\n2. **Club Registration**: Create Club (Unified) ‚Üí Verify ‚Üí Promote to FKF (optional)\n3. **Club Management**: Update Profile ‚Üí Upload Media ‚Üí Manage Staff\n4. **Staff Operations**: Add Managers ‚Üí Send Invitations ‚Üí Transfer Ownership\n5. **User Relationships**: Favorite Clubs ‚Üí View Owned/Managed Clubs\n6. **Discovery**: Search by Name/County/Region ‚Üí Geographic Proximity Search\n7. **Admin Operations**: Verify Clubs ‚Üí Manage Verification Workflows\n\n### 4. API Endpoint Categories (52+ Total)\n- **Club Registration & Verification**: 12 endpoints (unified registration, FKF promotion, verification workflows)\n- **Club Profile Management**: 14 endpoints (CRUD, search, media, statistics)\n- **Club Relationships**: 11 endpoints (favorites, popularity, recommendations)\n- **Club Staff Management**: 12 endpoints (managers, invitations, ownership transfer)\n- **Authentication & Users**: 5+ endpoints (signup, login, profile management)\n- **Location Services**: Stadium and county integration (interface ready)\n\n## üì± Base URL Structure\nAll endpoints follow the pattern: `{{base_url}}/api/v1/...`\n\n## üîí Security & Permissions\n- JWT tokens are automatically included in protected requests\n- Tokens are stored securely in environment variables\n- All sensitive endpoints require authentication\n- **Three-tier Permission System**:\n  - **Club Owner**: Full club management rights\n  - **Club Manager**: Limited management permissions\n  - **Admin**: Platform-wide administrative access\n\n## üåü Key Features\n- **Kenyan Football Integration**: FKF registration numbers and official verification\n- **Geographic Search**: Kenya's 47-county system with proximity-based discovery\n- **Professional Media Management**: Club logos and photos with automatic URL generation\n- **Comprehensive Staff System**: From grassroots volunteer management to professional club hierarchies\n- **Dual Verification**: Internal quality control + external official verification\n\n---\n\n**Version**: 3.0.0 (Sprint 3 Complete - Player Management)  \n**Updated**: August 2025  \n**Author**: LigiOpen Team  \n**Documentation**: https://docs.ligiopen.com  \n**Support**: support@ligiopen.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üîê Authentication & Authorization",
			"description": "Authentication endpoints including local auth, Google OAuth2, email verification, and token management.",
			"item": [
				{
					"name": "üìù User Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"// Test success status",
									"pm.test(\"Registration successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"// Store user email for later use",
									"pm.test(\"Store user email\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.email) {",
									"        pm.environment.set('user_email', jsonData.data.email);",
									"    }",
									"});",
									"",
									"console.log('‚úÖ User registration completed successfully!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testuser123\",\n  \"email\": \"testuser@ligiopen.com\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"phoneNumber\": \"+254712345678\",\n  \"preferredLanguage\": \"en\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signup"
							]
						},
						"description": "Register a new user account in the LigiOpen system.\n\n### Request Body\n- `username`: Unique username (3-50 characters)\n- `email`: Valid email address \n- `password`: Strong password (min 8 characters)\n- `firstName`: User's first name (2-50 characters)\n- `lastName`: User's last name (2-50 characters)\n- `phoneNumber`: Kenyan phone number format (+254...)\n- `preferredLanguage`: Language preference (en/sw)\n\n### Response\n- Returns user details and success message\n- Email verification will be required\n- User account starts as unverified\n\n### Next Steps\n1. Check application logs for verification email link\n2. Use the verification link to activate account\n3. Login with credentials to get JWT token"
					}
				},
				{
					"name": "üîì User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"// Test login success and extract tokens",
									"pm.test(\"Login successful and tokens present\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"    ",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('accessToken');",
									"        pm.expect(jsonData.data).to.have.property('refreshToken');",
									"        ",
									"        // Store tokens in environment",
									"        pm.environment.set('jwt_token', jsonData.data.accessToken);",
									"        pm.environment.set('refresh_token', jsonData.data.refreshToken);",
									"        ",
									"        // Store user info",
									"        if (jsonData.data.user) {",
									"            pm.environment.set('user_id', jsonData.data.user.id);",
									"            pm.environment.set('user_email', jsonData.data.user.email);",
									"        }",
									"    }",
									"});",
									"",
									"console.log('‚úÖ Login successful! JWT token stored in environment.');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testuser@ligiopen.com\",\n  \"password\": \"SecurePassword123!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/signin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signin"
							]
						},
						"description": "Authenticate user and receive JWT tokens.\n\n### Request Body\n- `email`: User's email address or username\n- `password`: User's password\n\n### Response\n- `accessToken`: JWT token for API authentication (expires in 24 hours)\n- `refreshToken`: Token for refreshing access token (expires in 7 days)\n- `user`: User profile information\n\n### Important Notes\n- Access token is automatically stored in environment variable `jwt_token`\n- Refresh token is stored in `refresh_token`\n- User must have verified email to login\n- Tokens are required for all protected endpoints\n\n### Usage\nThe JWT token will be automatically included in subsequent requests that require authentication."
					}
				},
				{
					"name": "üîÑ Refresh JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test token refresh",
									"pm.test(\"Token refresh successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"    ",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('accessToken');",
									"        pm.expect(jsonData.data).to.have.property('refreshToken');",
									"        ",
									"        // Update tokens in environment",
									"        pm.environment.set('jwt_token', jsonData.data.accessToken);",
									"        pm.environment.set('refresh_token', jsonData.data.refreshToken);",
									"    }",
									"});",
									"",
									"console.log('‚úÖ Tokens refreshed successfully!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh"
							]
						},
						"description": "Refresh expired JWT access token using refresh token.\n\n### Request Body\n- `refreshToken`: Valid refresh token from login\n\n### Response\n- New `accessToken`: Fresh JWT token (24 hour expiry)\n- New `refreshToken`: Fresh refresh token (7 day expiry)\n\n### When to Use\n- When access token expires (typically after 24 hours)\n- To maintain user session without re-login\n- Automatically updates environment variables\n\n### Security Notes\n- Refresh tokens are single-use and generate new tokens\n- Old refresh token becomes invalid after use\n- Both tokens are updated in environment automatically"
					}
				},
				{
					"name": "‚úÖ Verify Email Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test verification success",
									"pm.test(\"Email verification successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"console.log('‚úÖ Email verification completed!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/verify-email?token=your_verification_token_here",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"verify-email"
							],
							"query": [
								{
									"key": "token",
									"value": "your_verification_token_here",
									"description": "Email verification token from email"
								}
							]
						},
						"description": "Verify user's email address using verification token.\n\n### Query Parameters\n- `token`: Email verification token sent to user's email\n\n### Process\n1. User registers account\n2. Verification email is sent (check application logs)\n3. User clicks verification link or uses token manually\n4. Account becomes verified and active\n\n### Response\n- Success message confirming email verification\n- User can now login normally\n\n### Development Note\nIn development, verification emails are logged to console. Check application logs for the verification link and extract the token parameter."
					}
				},
				{
					"name": "üìß Resend Verification Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test resend success",
									"pm.test(\"Verification email resent\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"console.log('‚úÖ Verification email resent!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testuser@ligiopen.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/resend-verification",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"resend-verification"
							]
						},
						"description": "Resend email verification link to user's email address.\n\n### Request Body\n- `email`: User's email address that needs verification\n\n### When to Use\n- When user didn't receive initial verification email\n- When verification token has expired\n- When user needs a new verification link\n\n### Response\n- Success message confirming email was sent\n- New verification token generated and sent\n\n### Rate Limiting\n- Limited to prevent spam\n- Wait a few minutes between requests if needed"
					}
				},
				{
					"name": "üîó Google OAuth Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This is a browser-redirect endpoint",
									"// Cannot be tested directly in Postman",
									"console.log('‚ÑπÔ∏è This endpoint redirects to Google OAuth.');",
									"console.log('‚ÑπÔ∏è Use in browser: Copy the URL and paste in browser');",
									"console.log('‚ÑπÔ∏è After Google auth, you will be redirected back with tokens');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/oauth2/authorization/google",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"oauth2",
								"authorization",
								"google"
							]
						},
						"description": "üåê **Browser-Only Endpoint** - Initiates Google OAuth2 authentication flow.\n\n### ‚ö†Ô∏è Important Usage Notes\n- **Cannot be tested directly in Postman** - this is a browser redirect endpoint\n- **Copy the URL** from this request and **paste it in your browser**\n- **Manual browser testing required** for OAuth flow\n\n### OAuth Flow Process\n1. **User clicks this URL** in browser (or frontend redirects here)\n2. **Redirects to Google** for user authentication\n3. **User signs in with Google** account\n4. **Google redirects back** to our callback URL\n5. **Our server processes** the OAuth response\n6. **User gets redirected** to success/failure endpoint with tokens\n\n### What Happens After Google Auth\n- **Success**: Redirected to `/api/v1/auth/google/success?token=...&refreshToken=...`\n- **Failure**: Redirected to `/api/v1/auth/google/failure`\n\n### Frontend Integration\n```javascript\n// Redirect user to Google OAuth\nwindow.location.href = '{{base_url}}/api/v1/oauth2/authorization/google';\n\n// Or use in an anchor tag\n<a href=\"{{base_url}}/api/v1/oauth2/authorization/google\">\n  Sign in with Google\n</a>\n```\n\n### Server Configuration Required\n- `GOOGLE_CLIENT_ID` environment variable\n- `GOOGLE_SECRET` environment variable\n- Google OAuth2 configured with proper redirect URIs\n\n### Use Cases\n- **Single Sign-On (SSO)** with Google accounts\n- **Quick user registration** without manual form filling\n- **Seamless authentication** for users with Google accounts\n- **Social login** feature for mobile and web apps\n\n### Development Testing\n1. **Copy this URL**: `{{base_url}}/api/v1/oauth2/authorization/google`\n2. **Open in browser** (not Postman)\n3. **Complete Google sign-in**\n4. **Check the success/failure endpoints** for results\n5. **Extract JWT tokens** from success callback\n\n### Security Features\n- **OAuth2 standard compliance**\n- **State parameter** for CSRF protection\n- **Secure token exchange** with Google\n- **JWT token generation** after successful auth\n- **User profile creation/update** from Google data"
					}
				},
				{
					"name": "‚úÖ Google OAuth Success Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"// Test authentication success",
									"pm.test(\"Google authentication successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"});",
									"",
									"// Store JWT token automatically",
									"pm.test(\"Store JWT token\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.token) {",
									"        pm.environment.set('jwt_token', jsonData.data.token);",
									"        console.log('‚úÖ JWT token stored:', jsonData.data.token.substring(0, 20) + '...');",
									"    }",
									"});",
									"",
									"// Store refresh token if provided",
									"pm.test(\"Store refresh token\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.refreshToken) {",
									"        pm.environment.set('refresh_token', jsonData.data.refreshToken);",
									"        console.log('‚úÖ Refresh token stored');",
									"    }",
									"});",
									"",
									"// Log user information",
									"const jsonData = pm.response.json();",
									"if (jsonData.data) {",
									"    console.log('üë§ Google user authenticated successfully!');",
									"    console.log('üìß Email:', pm.request.url.query.get('email') || 'Not provided');",
									"    console.log('üÜî User ID:', pm.request.url.query.get('userId') || 'Not provided');",
									"    console.log('üÜï New User:', pm.request.url.query.get('isNewUser') || 'false');",
									"    console.log('‚è∞ Token expires in:', jsonData.data.expiresIn || 'Not specified', 'seconds');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/google/success?token=sample_jwt_token&refreshToken=sample_refresh_token&expiresIn=3600&userId=1&email=user@gmail.com&isNewUser=false",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"google",
								"success"
							],
							"query": [
								{
									"key": "token",
									"value": "sample_jwt_token",
									"description": "JWT access token"
								},
								{
									"key": "refreshToken",
									"value": "sample_refresh_token",
									"description": "Refresh token for renewing access"
								},
								{
									"key": "expiresIn",
									"value": "3600",
									"description": "Token expiration time in seconds"
								},
								{
									"key": "userId",
									"value": "1",
									"description": "User's unique ID in the system"
								},
								{
									"key": "email",
									"value": "user@gmail.com",
									"description": "User's email from Google"
								},
								{
									"key": "isNewUser",
									"value": "false",
									"description": "Whether this is a newly created user"
								}
							]
						},
						"description": "‚úÖ **OAuth Success Callback** - Handles successful Google authentication with JWT tokens.\n\n### How This Endpoint is Called\n- **Automatically called** by the OAuth2AuthenticationSuccessHandler\n- **Redirect destination** after successful Google authentication\n- **Not manually called** - part of OAuth flow\n\n### Query Parameters (Automatically Provided)\n- `token`: JWT access token for API authentication\n- `refreshToken`: Token for refreshing the access token\n- `expiresIn`: Token expiration time in seconds\n- `userId`: User's unique ID in the system\n- `email`: User's email address from Google\n- `isNewUser`: Boolean indicating if user was just created\n\n### User Data Processing\n**For New Users:**\n- Account automatically created from Google profile\n- Email, first name, last name extracted from Google\n- Profile picture URL saved from Google avatar\n- Google ID stored for future authentication\n\n**For Existing Users:**\n- Profile updated with latest Google information\n- Login timestamp updated\n- Existing data preserved\n\n### Response Format\n```json\n{\n  \"success\": true,\n  \"message\": \"Google authentication successful\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"message\": \"Google authentication successful\",\n    \"expiresIn\": 3600\n  }\n}\n```\n\n### Frontend Integration\n```javascript\n// Parse tokens from callback URL\nconst urlParams = new URLSearchParams(window.location.search);\nconst token = urlParams.get('token');\nconst refreshToken = urlParams.get('refreshToken');\nconst isNewUser = urlParams.get('isNewUser');\n\n// Store tokens and redirect to app\nif (token) {\n    localStorage.setItem('jwt_token', token);\n    localStorage.setItem('refresh_token', refreshToken);\n    \n    // Redirect to appropriate page\n    if (isNewUser === 'true') {\n        window.location.href = '/welcome';\n    } else {\n        window.location.href = '/dashboard';\n    }\n}\n```\n\n### What Happens After Success\n1. **JWT token stored** in environment (automatically in Postman)\n2. **User can access** protected API endpoints\n3. **Frontend redirects** user to appropriate page\n4. **Authentication state** established for the session\n\n### Use Cases\n- **Complete OAuth flow** testing\n- **Token extraction** for API testing\n- **New user onboarding** flow verification\n- **Existing user login** confirmation\n\n### Testing Notes\n- **Use sample values** in query params for testing\n- **Real values come** from OAuth flow\n- **JWT tokens automatically stored** in Postman environment\n- **Test protected endpoints** after successful auth"
					}
				},
				{
					"name": "‚ùå Google OAuth Failure Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has error information\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});",
									"",
									"// Test failure status",
									"pm.test(\"Google authentication failed\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"// Log failure information",
									"const jsonData = pm.response.json();",
									"console.log('‚ùå Google authentication failed');",
									"console.log('üîç Error details:', jsonData.errors || 'No specific error provided');",
									"console.log('üí° Possible causes:');",
									"console.log('  - User denied Google permissions');",
									"console.log('  - Invalid Google OAuth configuration');",
									"console.log('  - Network connectivity issues');",
									"console.log('  - Server-side processing error');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/google/failure",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"google",
								"failure"
							]
						},
						"description": "‚ùå **OAuth Failure Callback** - Handles failed Google authentication attempts.\n\n### How This Endpoint is Called\n- **Automatically called** when Google authentication fails\n- **Redirect destination** for authentication errors\n- **Not manually called** - part of OAuth error handling\n\n### Common Failure Scenarios\n1. **User denies permissions** to the application\n2. **Invalid Google OAuth configuration** (missing/wrong client ID/secret)\n3. **Network connectivity issues** during authentication\n4. **Server-side processing errors** (user creation failed, etc.)\n5. **Missing required user data** from Google (email, ID)\n6. **Database connection issues** during user creation/update\n\n### Response Format\n```json\n{\n  \"success\": false,\n  \"message\": \"failed\",\n  \"errors\": {\n    \"authentication\": \"Google authentication failed\"\n  }\n}\n```\n\n### Error Handling Flow\n1. **OAuth process fails** at any stage\n2. **User redirected** to this failure endpoint\n3. **Error information provided** in response\n4. **Frontend handles** the error appropriately\n5. **User shown** appropriate error message\n\n### Frontend Error Handling\n```javascript\n// Check if current URL is the failure callback\nif (window.location.pathname.includes('/api/v1/auth/google/failure')) {\n    // Show error message to user\n    showNotification('Google authentication failed. Please try again.', 'error');\n    \n    // Redirect back to login page\n    setTimeout(() => {\n        window.location.href = '/login';\n    }, 3000);\n}\n```\n\n### Debugging OAuth Issues\n1. **Check server logs** for detailed error messages\n2. **Verify Google OAuth configuration** in environment variables\n3. **Test Google Developer Console** settings\n4. **Confirm redirect URIs** match exactly\n5. **Check network connectivity** and firewall settings\n\n### Recovery Actions\n- **Retry authentication** with same Google account\n- **Try different Google account** if user has multiple\n- **Use alternative authentication** methods (email/password)\n- **Contact support** if problem persists\n\n### Security Considerations\n- **No sensitive data exposed** in error responses\n- **Generic error messages** to prevent information leakage\n- **Failure attempts logged** for security monitoring\n- **Rate limiting applied** to prevent abuse\n\n### Use Cases\n- **Error flow testing** in OAuth integration\n- **User experience validation** for failed authentication\n- **Debugging OAuth configuration** issues\n- **Security monitoring** and logging verification\n\n### Development Notes\n- **Check application logs** for detailed failure reasons\n- **Test with various failure scenarios** to ensure robust handling\n- **Implement user-friendly error messages** in frontend\n- **Provide clear recovery instructions** to users"
					}
				}
			]
		},
		{
			"name": "üë§ User Profile Management",
			"description": "Complete user profile CRUD operations including profile updates, picture uploads, and account management.",
			"item": [
				{
					"name": "üë§ Get Current User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test authentication",
									"pm.test(\"User is authenticated\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"// Test profile structure",
									"pm.test(\"Profile has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('id');",
									"        pm.expect(jsonData.data).to.have.property('email');",
									"        pm.expect(jsonData.data).to.have.property('firstName');",
									"        pm.expect(jsonData.data).to.have.property('lastName');",
									"    }",
									"});",
									"",
									"console.log('‚úÖ User profile retrieved successfully!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"profile"
							]
						},
						"description": "Get the authenticated user's complete profile information.\n\n### Authentication Required\n- JWT token must be included in Authorization header\n- Token is automatically included from environment variable\n\n### Response Fields\n- `id`: User's unique identifier\n- `username`: User's username\n- `email`: User's email address\n- `firstName` & `lastName`: User's name\n- `phoneNumber`: Contact number\n- `bio`: User's biography/description\n- `preferredLanguage`: Language preference\n- `profilePictureUrl`: URL to profile picture (if uploaded)\n- `emailVerified`: Email verification status\n- `accountEnabled`: Account status\n- `role`: User's role in the system\n- `createdAt` & `updatedAt`: Timestamps\n- `favoritedClubsCount`: Number of clubs favorited\n- `ownedClubsCount`: Number of clubs owned\n- `managedClubsCount`: Number of clubs managed\n\n### Use Cases\n- Display user information in UI\n- Profile page data\n- User settings initialization\n- Dashboard statistics"
					}
				},
				{
					"name": "üë§ Get User Profile by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test profile retrieval",
									"pm.test(\"Profile retrieved successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"console.log('‚úÖ User profile retrieved by ID!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{user_id}}/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}",
								"profile"
							]
						},
						"description": "Get any user's public profile information by their user ID.\n\n### Path Parameters\n- `userId`: The unique identifier of the user whose profile to retrieve\n\n### Authentication Required\n- JWT token required for accessing user profiles\n- Returns public profile information only\n\n### Response\n- Same structure as current user profile\n- May have restricted information for privacy\n- Useful for viewing other users' public profiles\n\n### Use Cases\n- Club member profiles\n- Player profiles\n- Public user directories\n- Social features\n\n### Privacy Notes\n- Only public information is returned\n- Some fields may be hidden based on privacy settings\n- Sensitive information is never exposed"
					}
				},
				{
					"name": "‚úèÔ∏è Update Current User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test update success",
									"pm.test(\"Profile updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"// Verify updated fields",
									"pm.test(\"Updated fields are present\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('firstName');",
									"        pm.expect(jsonData.data).to.have.property('lastName');",
									"    }",
									"});",
									"",
									"console.log('‚úÖ Profile updated successfully!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe Updated\",\n  \"phoneNumber\": \"+254787654321\",\n  \"bio\": \"Updated bio: Football enthusiast and LigiOpen user. Passionate about Kenyan football development.\",\n  \"preferredLanguage\": \"sw\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"profile"
							]
						},
						"description": "Update the authenticated user's profile information.\n\n### Authentication Required\n- JWT token must be included in Authorization header\n\n### Request Body (All fields optional)\n- `firstName`: First name (2-50 characters)\n- `lastName`: Last name (2-50 characters)\n- `phoneNumber`: Phone number in international format\n- `bio`: User biography/description (max 500 characters)\n- `preferredLanguage`: Language preference (en/sw)\n\n### Validation Rules\n- Names must be 2-50 characters long\n- Phone number must be valid international format\n- Bio cannot exceed 500 characters\n- Language must be 'en' or 'sw'\n\n### Response\n- Returns updated profile information\n- All profile fields included in response\n- Updated timestamp reflects change time\n\n### Use Cases\n- Profile editing forms\n- Settings updates\n- Personal information maintenance\n- Language preference changes\n\n### Important Notes\n- Only provided fields are updated\n- Validation errors return specific field messages\n- Profile picture updated separately"
					}
				},
				{
					"name": "üì∑ Upload Profile Picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test upload success",
									"pm.test(\"Profile picture uploaded successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"// Verify file information",
									"pm.test(\"File information present\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('fileUrl');",
									"        pm.expect(jsonData.data).to.have.property('fileId');",
									"        pm.expect(jsonData.data).to.have.property('profile');",
									"    }",
									"});",
									"",
									"console.log('‚úÖ Profile picture uploaded successfully!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"description": "Profile picture image file (JPG, PNG, max 10MB)"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/profile/picture",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"profile",
								"picture"
							]
						},
						"description": "Upload a new profile picture for the authenticated user.\n\n### Authentication Required\n- JWT token must be included in Authorization header\n\n### Request Body (Form Data)\n- `file`: Image file to upload as profile picture\n\n### File Requirements\n- **Format**: JPG, JPEG, PNG only\n- **Size**: Maximum 10MB\n- **Type**: Must be an image file\n- **Content**: Appropriate profile picture content\n\n### Digital Ocean Spaces Integration\n- Files uploaded to Digital Ocean Spaces\n- Automatic file optimization and resizing\n- CDN delivery for fast loading\n- Secure file storage with access controls\n\n### Response\n- `profile`: Updated user profile with new picture URL\n- `fileUrl`: Direct URL to uploaded image\n- `fileId`: Unique file identifier for management\n\n### Use Cases\n- Profile picture updates\n- Avatar customization\n- User identification\n- Social profile enhancement\n\n### Important Notes\n- Previous profile picture is automatically replaced\n- File is validated for type and size\n- URL is immediately available for use\n- Optimized for web and mobile display\n\n### Error Handling\n- Invalid file types rejected\n- Oversized files rejected\n- Corrupted files handled gracefully\n- Detailed error messages provided"
					}
				},
				{
					"name": "üóëÔ∏è Remove Profile Picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test removal success",
									"pm.test(\"Profile picture removed successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"console.log('‚úÖ Profile picture removed successfully!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/users/profile/picture",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"profile",
								"picture"
							]
						},
						"description": "Remove the current profile picture for the authenticated user.\n\n### Authentication Required\n- JWT token must be included in Authorization header\n\n### Action\n- Removes current profile picture from user profile\n- Deletes file from Digital Ocean Spaces storage\n- Resets profile picture URL to null\n- Cannot be undone (file is permanently deleted)\n\n### Response\n- Success message confirming removal\n- Profile reverts to default/no picture state\n\n### Use Cases\n- Privacy concerns\n- Profile cleanup\n- Before uploading new picture\n- Account management\n\n### Important Notes\n- File is permanently deleted from storage\n- Profile picture URL becomes null\n- Action cannot be reversed\n- Does not affect other profile information\n\n### After Removal\n- User profile shows no picture\n- Can upload new picture anytime\n- Profile remains fully functional"
					}
				},
				{
					"name": "üóëÔ∏è Delete Current User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test deletion success",
									"pm.test(\"Profile deleted successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"// Clear environment variables",
									"pm.test(\"Clear authentication tokens\", function () {",
									"    pm.environment.unset('jwt_token');",
									"    pm.environment.unset('refresh_token');",
									"    pm.environment.unset('user_id');",
									"    pm.environment.unset('user_email');",
									"});",
									"",
									"console.log('‚ö†Ô∏è User profile and account deleted permanently!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"profile"
							]
						},
						"description": "‚ö†Ô∏è **PERMANENTLY DELETE** the authenticated user's account and all associated data.\n\n### Authentication Required\n- JWT token must be included in Authorization header\n\n### ‚ö†Ô∏è WARNING - IRREVERSIBLE ACTION\nThis action will permanently delete:\n- User account and profile\n- All uploaded files and media\n- Club memberships and relationships\n- Favorited clubs and preferences\n- All user-generated content\n- Account history and statistics\n\n### Data Deletion\n- User profile completely removed\n- Files deleted from Digital Ocean Spaces\n- Database records permanently deleted\n- No recovery possible after deletion\n- Complies with data protection regulations\n\n### Response\n- Success message confirming deletion\n- JWT tokens become invalid immediately\n- All sessions terminated\n\n### Use Cases\n- Account closure requests\n- Privacy compliance (GDPR right to erasure)\n- User-initiated account deletion\n- Administrative account removal\n\n### Post-Deletion\n- User cannot login with deleted credentials\n- Email address becomes available for new registration\n- All associated data is permanently removed\n- Action cannot be undone\n\n### Important Notes\n- **This action is irreversible**\n- Consider data export before deletion\n- Inform user of permanent nature\n- All related data is cascade deleted\n- Complies with data retention policies"
					}
				}
			]
		},
		{
			"name": "üèõÔ∏è Club Management",
			"description": "Sprint 2: Comprehensive club management system including registration, verification, profile management, staff management, and user relationships.",
			"item": [
				{
					"name": "üìã Club Registration",
					"description": "Club registration endpoints supporting both grassroots and FKF-registered clubs with dual verification system.",
					"item": [
						{
							"name": "üå± Register Grassroots Club",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"pm.test(\"Club registration successful\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"    if (jsonData.data && jsonData.data.id) {",
											"        pm.environment.set('club_id', jsonData.data.id);",
											"        console.log('‚úÖ Club ID stored:', jsonData.data.id);",
											"    }",
											"});",
											"",
											"console.log('‚úÖ Grassroots club registered successfully!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Kibera United FC\",\n  \"shortName\": \"KUFC\",\n  \"description\": \"Community football club from Kibera, promoting youth development through football\",\n  \"foundedYear\": 2019,\n  \"colors\": \"Green and White\",\n  \"homeCountyId\": 1,\n  \"city\": \"Nairobi\",\n  \"town\": \"Kibera\",\n  \"address\": \"Olympic Estate, Kibera\",\n  \"phoneNumber\": \"+254712345678\",\n  \"email\": \"info@kiberaunited.co.ke\",\n  \"websiteUrl\": \"https://kiberaunited.co.ke\",\n  \"socialMediaHandles\": {\n    \"twitter\": \"@KiberaUnitedFC\",\n    \"facebook\": \"KiberaUnitedFC\",\n    \"instagram\": \"kiberaunited\"\n  },\n  \"clubType\": \"GRASSROOTS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/register/grassroots",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"register",
										"grassroots"
									]
								},
								"description": "Register a new grassroots club in the LigiOpen system.\n\n### Authentication Required\n- JWT token must be included in Authorization header\n- User becomes the club owner automatically\n\n### Club Type: Grassroots\n- Community-level football clubs\n- No FKF registration required\n- Focus on youth development and community engagement\n- Simpler verification process\n\n### Request Body\n- `name`: Full club name (required)\n- `shortName`: Abbreviated name (optional)\n- `description`: Club description and mission\n- `foundedYear`: Year the club was established\n- `colors`: Club colors/kit colors\n- `homeCountyId`: ID of the home county (required)\n- `city` & `town`: Location details\n- `phoneNumber` & `email`: Contact information\n- `socialMediaHandles`: Social media presence\n\n### Response\n- Returns created club with initial verification status\n- Club starts with LigiOpen verification = PENDING\n- FKF verification = NOT_APPLICABLE for grassroots\n- Owner automatically set to requesting user"
							}
						},
						{
							"name": "üèÜ Register FKF Club",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"pm.test(\"FKF club registration successful\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"    if (jsonData.data && jsonData.data.id) {",
											"        pm.environment.set('fkf_club_id', jsonData.data.id);",
											"    }",
											"});",
											"",
											"console.log('‚úÖ FKF club registered successfully!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Gor Mahia FC\",\n  \"shortName\": \"GM\",\n  \"description\": \"Kenya's most successful football club with rich history and passionate fanbase\",\n  \"foundedYear\": 1968,\n  \"colors\": \"Green and White\",\n  \"homeCountyId\": 1,\n  \"city\": \"Nairobi\",\n  \"town\": \"Nairobi\",\n  \"address\": \"Kasarani Sports Complex\",\n  \"phoneNumber\": \"+254711000000\",\n  \"email\": \"info@gormahiafc.co.ke\",\n  \"websiteUrl\": \"https://gormahiafc.co.ke\",\n  \"socialMediaHandles\": {\n    \"twitter\": \"@GorMahiaFC\",\n    \"facebook\": \"GorMahiaFC\",\n    \"instagram\": \"gormahiafc\"\n  },\n  \"clubType\": \"PROFESSIONAL\",\n  \"fkfRegistrationNumber\": \"FKF-2024-001\",\n  \"fkfRegistrationDate\": \"2024-01-15\",\n  \"league\": \"FKF Premier League\",\n  \"tier\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/register/fkf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"register",
										"fkf"
									]
								},
								"description": "Register an FKF-registered professional club.\n\n### Authentication Required\n- JWT token required\n- User becomes club owner\n\n### Club Type: FKF Registered\n- Professional and semi-professional clubs\n- Official FKF registration required\n- Dual verification system applies\n- Higher tier club management\n\n### Additional FKF Fields\n- `fkfRegistrationNumber`: Official FKF registration number\n- `fkfRegistrationDate`: Date of FKF registration\n- `league`: Current league participation\n- `tier`: League tier (1=Premier, 2=National, etc.)\n\n### Verification Process\n1. LigiOpen internal verification (PENDING)\n2. FKF official verification (PENDING)\n3. Both must be completed for full verification"
							}
						},
						{
							"name": "‚≠ê Register Club (Unified)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"pm.test(\"Club registration successful\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"    if (jsonData.data && jsonData.data.id) {",
											"        pm.environment.set('club_id', jsonData.data.id);",
											"        console.log('‚úÖ Club ID stored:', jsonData.data.id);",
											"    }",
											"});",
											"",
											"console.log('‚úÖ Club registered successfully with unified endpoint!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Nakuru City FC\",\n  \"shortName\": \"NCFC\",\n  \"abbreviation\": \"NCF\",\n  \"founded\": \"2020-03-15\",\n  \"description\": \"Professional football club based in Nakuru City, competing in national leagues\",\n  \"colors\": \"Blue and Gold\",\n  \"contactEmail\": \"info@nakurucityfc.co.ke\",\n  \"contactPhone\": \"+254722334455\",\n  \"websiteUrl\": \"https://nakurucityfc.co.ke\",\n  \"socialMediaLinks\": \"{\\\"twitter\\\": \\\"@NakuruCityFC\\\", \\\"facebook\\\": \\\"NakuruCityFC\\\", \\\"instagram\\\": \\\"nakurucityfc\\\"}\",\n  \"countyId\": 32,\n  \"homeStadiumId\": 15,\n  \"clubLevel\": \"NATIONAL\",\n  \"fkfRegistrationNumber\": \"FKF-NK-2024-015\",\n  \"fkfRegistrationDate\": \"2024-04-10\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/registration",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"registration"
									]
								},
								"description": "**UNIFIED** club registration endpoint supporting both grassroots and professional clubs with intelligent routing.\n\n### Authentication Required\n- JWT token must be included in Authorization header\n- User automatically becomes the club owner\n\n### Intelligent Registration\n- **Single endpoint** for all club types\n- **Automatic detection** of club level based on provided fields\n- **Smart validation** applies appropriate rules based on club type\n- **Flexible field handling** - optional FKF fields for grassroots clubs\n\n### Request Body (All Fields Optional Except Required)\n**Required Fields:**\n- `name`: Full club name\n- `contactEmail`: Primary contact email\n- `countyId`: Home county ID (1-47 for Kenya)\n\n**Optional Basic Fields:**\n- `shortName`: Abbreviated club name\n- `abbreviation`: 2-4 letter abbreviation\n- `founded`: Foundation date (YYYY-MM-DD)\n- `description`: Club mission and description\n- `colors`: Team colors/kit colors\n- `contactPhone`: Kenyan format (+254...)\n- `websiteUrl`: Official website\n- `socialMediaLinks`: JSON string of social handles\n- `homeStadiumId`: Home venue ID\n- `clubLevel`: GRASSROOTS, COUNTY, REGIONAL, NATIONAL, PREMIER\n\n**FKF Professional Fields (Optional):**\n- `fkfRegistrationNumber`: Official FKF registration\n- `fkfRegistrationDate`: Date of FKF registration\n\n### Smart Processing Logic\n1. **If FKF fields provided**: Creates professional club with dual verification\n2. **If no FKF fields**: Creates grassroots club with simple verification\n3. **Validation adapts** to club type automatically\n4. **Verification workflow** assigned based on club level\n\n### Verification Status\n- **Grassroots**: LigiOpen internal verification only\n- **Professional**: Both LigiOpen + FKF verification required\n- **Initial status**: PENDING for applicable verification types\n\n### Response\n- Complete club profile with assigned verification status\n- Owner automatically set to requesting user\n- Club ID for future operations\n- Verification workflow initiated\n\n### Use Cases\n- **Community clubs** can register without FKF details\n- **Professional clubs** include FKF registration info\n- **Upgrading clubs** can add FKF details later via promotion endpoint\n- **Single API integration** for all frontend forms\n\n### Example Bodies\n**Grassroots Club (Minimal):**\n```json\n{\n  \"name\": \"Mathare Youth FC\",\n  \"contactEmail\": \"contact@mathareyouth.org\",\n  \"countyId\": 1,\n  \"description\": \"Youth development through football\"\n}\n```\n\n**Professional Club (Full):**\n```json\n{\n  \"name\": \"Nakuru City FC\",\n  \"shortName\": \"NCFC\",\n  \"contactEmail\": \"info@nakurucityfc.co.ke\",\n  \"countyId\": 32,\n  \"clubLevel\": \"NATIONAL\",\n  \"fkfRegistrationNumber\": \"FKF-NK-2024-015\",\n  \"fkfRegistrationDate\": \"2024-04-10\"\n}\n```"
							}
						}
					]
				},
				{
					"name": "üëë Club Profile Management",
					"description": "Complete CRUD operations for club profiles including updates, media management, and deletion.",
					"item": [
						{
							"name": "üîç Get Club by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Club retrieved successfully\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"});",
											"",
											"console.log('‚úÖ Club profile retrieved successfully!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/{{club_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"{{club_id}}"
									]
								},
								"description": "Retrieve detailed information about a specific club by ID.\n\n### Public Endpoint\n- No authentication required\n- Returns public club information\n- Includes verification status and basic details\n\n### Response Fields\n- Complete club profile information\n- Owner and managers information\n- Verification status (LigiOpen + FKF)\n- Media URLs (logo, photos)\n- Contact information and social media\n- Location details (county, city, town)"
							}
						},
						{
							"name": "üìù Update Club Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Club updated successfully\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"});",
											"",
											"console.log('‚úÖ Club profile updated successfully!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Kibera United Football Club\",\n  \"shortName\": \"KUFC\",\n  \"description\": \"Premier community football club from Kibera, dedicated to youth development and community empowerment through football\",\n  \"colors\": \"Green, White and Gold\",\n  \"phoneNumber\": \"+254787654321\",\n  \"email\": \"contact@kiberaunited.co.ke\",\n  \"websiteUrl\": \"https://www.kiberaunited.co.ke\",\n  \"socialMediaHandles\": {\n    \"twitter\": \"@KiberaUnitedFC\",\n    \"facebook\": \"KiberaUnitedFootballClub\",\n    \"instagram\": \"kiberaunitedfc\",\n    \"youtube\": \"KiberaUnitedFC\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/{{club_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"{{club_id}}"
									]
								},
								"description": "Update club profile information.\n\n### Authentication Required\n- Must be club owner or manager\n- JWT token required\n\n### Updateable Fields\n- Basic information (name, description, colors)\n- Contact details (phone, email, website)\n- Social media handles\n- Location information\n\n### Validation\n- Club name must be unique\n- Email format validation\n- Phone number format validation\n- URL format validation for website and social media\n\n### Permissions\n- Owner: Can update all fields\n- Managers: Limited field updates (based on permissions)"
							}
						},
						{
							"name": "üîç Search Clubs by Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Search results retrieved\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"    pm.expect(jsonData.data).to.have.property('clubs');",
											"});",
											"",
											"console.log('‚úÖ Club search completed successfully!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/search?query=United&page=0&size=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "United",
											"description": "Search term for club name"
										},
										{
											"key": "page",
											"value": "0",
											"description": "Page number (0-based)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "Number of results per page"
										}
									]
								},
								"description": "Search clubs by name with pagination support.\n\n### Public Endpoint\n- No authentication required\n- Returns matching clubs based on name search\n\n### Query Parameters\n- `query`: Search term (required) - searches club names\n- `page`: Page number (0-based, default: 0)\n- `size`: Results per page (default: 20, max: 100)\n\n### Search Features\n- **Case-insensitive** name matching\n- **Partial matching** - finds clubs containing search term\n- **Fuzzy matching** for better search results\n- **Pagination** for large result sets\n\n### Response\n- `clubs`: Array of matching club profiles\n- `totalElements`: Total number of matching clubs\n- `currentPage`: Current page number\n- `pageSize`: Number of results per page\n\n### Use Cases\n- Club discovery by name\n- Auto-complete functionality\n- General club search\n- Finding specific clubs\n\n### Performance\n- Indexed database search\n- Fast response times\n- Optimized for mobile and web"
							}
						},
						{
							"name": "üèõÔ∏è Get Clubs by County",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"County clubs retrieved\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"    pm.expect(jsonData.data).to.have.property('clubs');",
											"    pm.expect(jsonData.data).to.have.property('countyId');",
											"});",
											"",
											"console.log('‚úÖ County clubs retrieved successfully!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/county/1?page=0&size=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"county",
										"1"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Page number (0-based)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "Number of results per page"
										}
									]
								},
								"description": "Get all clubs in a specific Kenyan county with pagination.\n\n### Public Endpoint\n- No authentication required\n- Returns clubs based in the specified county\n\n### Path Parameters\n- `countyId`: County ID (1-47 for Kenya's counties)\n  - 1: Nairobi\n  - 2: Mombasa\n  - 3: Kwale\n  - ... (all 47 Kenyan counties)\n\n### Query Parameters\n- `page`: Page number (0-based, default: 0)\n- `size`: Results per page (default: 20)\n\n### Kenya County Integration\n- **All 47 counties** supported\n- **Regional grouping** available\n- **Geographic accuracy** ensured\n- **Local football structure** respected\n\n### Response\n- `clubs`: Array of clubs in the county\n- `totalElements`: Total clubs in county\n- `currentPage`: Current page number\n- `pageSize`: Results per page\n- `countyId`: County identifier\n\n### Use Cases\n- **Local club discovery**\n- **Regional tournaments**\n- **Geographic analysis**\n- **County-based competitions**\n\n### Common County IDs\n- **1**: Nairobi (Capital, most clubs)\n- **2**: Mombasa (Coastal football hub)\n- **32**: Nakuru (Rift Valley center)\n- **22**: Kisumu (Western Kenya hub)"
							}
						},
						{
							"name": "üåç Get Clubs by Region",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Regional clubs retrieved\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"    pm.expect(jsonData.data).to.have.property('clubs');",
											"    pm.expect(jsonData.data).to.have.property('region');",
											"});",
											"",
											"console.log('‚úÖ Regional clubs retrieved successfully!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/region/Central?page=0&size=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"region",
										"Central"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Page number (0-based)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "Number of results per page"
										}
									]
								},
								"description": "Get clubs in a specific Kenyan region with pagination.\n\n### Public Endpoint\n- No authentication required\n- Returns clubs grouped by Kenya's administrative regions\n\n### Path Parameters\n- `region`: Region name (case-sensitive)\n  - **Central**: Kiambu, Murang'a, Nyeri, Nyandarua, Kirinyaga\n  - **Coast**: Mombasa, Kwale, Kilifi, Tana River, Lamu, Taita-Taveta\n  - **Eastern**: Machakos, Makueni, Kitui, Embu, Tharaka-Nithi, Meru, Isiolo\n  - **North Eastern**: Garissa, Wajir, Mandera\n  - **Nyanza**: Kisumu, Siaya, Kisii, Nyamira, Homa Bay, Migori\n  - **Rift Valley**: Nakuru, Narok, Kajiado, Kericho, Bomet, Kakamega, etc.\n  - **Western**: Kakamega, Vihiga, Bungoma, Busia\n  - **Nairobi**: Nairobi County (special status)\n\n### Kenya Regional Structure\n- **8 main regions** covering all 47 counties\n- **Regional tournaments** and competitions\n- **Cultural and geographic** football differences\n- **Development priorities** vary by region\n\n### Response\n- `clubs`: Array of clubs in the region\n- `totalElements`: Total clubs in region\n- `currentPage`: Current page number\n- `pageSize`: Results per page\n- `region`: Region name\n\n### Use Cases\n- **Regional competitions**\n- **Development programs**\n- **Geographic analysis**\n- **Cultural football studies**\n\n### Popular Regions for Football\n- **Nairobi**: Highest concentration of professional clubs\n- **Central**: Strong grassroots development\n- **Rift Valley**: Large geographic area, diverse clubs\n- **Coast**: Unique coastal football culture"
							}
						},
						{
							"name": "üèÜ Get Clubs by Level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Level-based clubs retrieved\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"    pm.expect(jsonData.data).to.have.property('clubs');",
											"    pm.expect(jsonData.data).to.have.property('level');",
											"});",
											"",
											"console.log('‚úÖ Clubs by level retrieved successfully!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/level/NATIONAL?page=0&size=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"level",
										"NATIONAL"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Page number (0-based)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "Number of results per page"
										}
									]
								},
								"description": "Get clubs filtered by their competitive level.\n\n### Public Endpoint\n- No authentication required\n- Returns clubs based on their competitive tier\n\n### Path Parameters\n- `level`: Club competitive level (enum values)\n  - **GRASSROOTS**: Community and youth development clubs\n  - **COUNTY**: County-level competitive clubs\n  - **REGIONAL**: Regional championship clubs\n  - **NATIONAL**: National division clubs\n  - **PREMIER**: Top-tier professional clubs (FKF Premier League)\n\n### Club Level Hierarchy\n1. **PREMIER**: Elite professional clubs (16-20 clubs)\n   - FKF Premier League participants\n   - Professional players and management\n   - National and international competitions\n\n2. **NATIONAL**: National division clubs (40+ clubs)\n   - FKF Division One and Two\n   - Semi-professional setup\n   - Pathway to premier league\n\n3. **REGIONAL**: Regional competitive clubs (100+ clubs)\n   - Regional championships\n   - County representatives\n   - Organized league structure\n\n4. **COUNTY**: County-level clubs (500+ clubs)\n   - County leagues and tournaments\n   - Local competitive structure\n   - Community-based competitions\n\n5. **GRASSROOTS**: Community clubs (1000+ clubs)\n   - Youth development focus\n   - Community engagement\n   - Entry-level football\n\n### Response\n- `clubs`: Array of clubs at specified level\n- `totalElements`: Total clubs at this level\n- `currentPage`: Current page number\n- `pageSize`: Results per page\n- `level`: Club level filter\n\n### Use Cases\n- **Competitive analysis**\n- **League management**\n- **Development pathway mapping**\n- **Tournament organization**\n- **Scout network building**\n\n### Level Statistics (Approximate)\n- Premier: 18 clubs\n- National: 60+ clubs  \n- Regional: 200+ clubs\n- County: 800+ clubs\n- Grassroots: 2000+ clubs"
							}
						},
						{
							"name": "üìç Get Clubs Near Location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Nearby clubs retrieved\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"    pm.expect(jsonData.data).to.have.property('clubs');",
											"    pm.expect(jsonData.data).to.have.property('searchLocation');",
											"});",
											"",
											"console.log('‚úÖ Nearby clubs retrieved successfully!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/near?latitude=-1.286389&longitude=36.817223&radiusKm=25.0&page=0&size=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"near"
									],
									"query": [
										{
											"key": "latitude",
											"value": "-1.286389",
											"description": "Latitude coordinate (Nairobi CBD example)"
										},
										{
											"key": "longitude",
											"value": "36.817223",
											"description": "Longitude coordinate (Nairobi CBD example)"
										},
										{
											"key": "radiusKm",
											"value": "25.0",
											"description": "Search radius in kilometers"
										},
										{
											"key": "page",
											"value": "0",
											"description": "Page number (0-based)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "Number of results per page"
										}
									]
								},
								"description": "Find clubs near a specific geographic location using GPS coordinates.\n\n### Public Endpoint\n- No authentication required\n- Uses Haversine formula for accurate distance calculation\n\n### Query Parameters (Required)\n- `latitude`: GPS latitude coordinate (decimal degrees)\n- `longitude`: GPS longitude coordinate (decimal degrees)\n\n### Query Parameters (Optional)\n- `radiusKm`: Search radius in kilometers (default: 50km, max: 200km)\n- `page`: Page number (0-based, default: 0)\n- `size`: Results per page (default: 20)\n\n### Geographic Search Features\n- **Haversine formula** for precise distance calculation\n- **Kilometers and miles** support\n- **Proximity sorting** - nearest clubs first\n- **Radius filtering** - configurable search area\n\n### Kenya GPS Coordinates (Examples)\n- **Nairobi CBD**: -1.286389, 36.817223\n- **Mombasa**: -4.043477, 39.658871\n- **Kisumu**: -0.091702, 34.767956\n- **Nakuru**: -0.303099, 36.080025\n- **Eldoret**: 0.514277, 35.269779\n\n### Response\n- `clubs`: Array of nearby clubs (sorted by distance)\n- `totalElements`: Total clubs within radius\n- `searchLocation`: Input coordinates for reference\n- `radiusKm`: Applied search radius\n- `currentPage`: Current page number\n- `pageSize`: Results per page\n\n### Distance Calculation\n- Each club includes calculated distance from search point\n- Distances in kilometers (can be converted to miles)\n- Accurate to within meters using Haversine formula\n\n### Use Cases\n- **Mobile app location services**\n- **\"Find clubs near me\" functionality**\n- **Geographic club discovery**\n- **Local community mapping**\n- **Tournament venue selection**\n- **Travel planning for matches**\n\n### Performance\n- Optimized spatial queries\n- Geographic database indexing\n- Fast response times for mobile\n\n### Typical Radius Values\n- **5km**: Immediate neighborhood\n- **25km**: City-wide search\n- **50km**: Regional area\n- **100km**: Cross-county search"
							}
						},
						{
							"name": "‚úÖ Get Verified Clubs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verified clubs retrieved\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"    pm.expect(jsonData.data).to.have.property('clubs');",
											"    pm.expect(jsonData.data).to.have.property('verificationType');",
											"});",
											"",
											"console.log('‚úÖ Verified clubs retrieved successfully!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/verified?verificationType=both&page=0&size=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"verified"
									],
									"query": [
										{
											"key": "verificationType",
											"value": "both",
											"description": "Verification filter: 'ligiopen', 'fkf', or 'both'"
										},
										{
											"key": "page",
											"value": "0",
											"description": "Page number (0-based)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "Number of results per page"
										}
									]
								},
								"description": "Get clubs based on their verification status in LigiOpen's dual verification system.\n\n### Public Endpoint\n- No authentication required\n- Shows clubs with verified authenticity\n\n### Query Parameters\n- `verificationType`: Verification filter (default: 'ligiopen')\n  - **'ligiopen'**: LigiOpen internal verification only\n  - **'fkf'**: FKF official verification only  \n  - **'both'**: Both LigiOpen and FKF verified (highest trust)\n- `page`: Page number (0-based, default: 0)\n- `size`: Results per page (default: 20)\n\n### LigiOpen Dual Verification System\n\n#### 1. LigiOpen Internal Verification\n- **Community validation**: User reports and feedback\n- **Data accuracy**: Contact information and location verification\n- **Activity monitoring**: Regular updates and engagement\n- **Quality assurance**: Profile completeness and authenticity\n\n#### 2. FKF Official Verification  \n- **Registration validation**: Official FKF registration numbers\n- **Legal compliance**: Meets FKF club requirements\n- **Competitive participation**: Active in FKF competitions\n- **Administrative approval**: FKF official endorsement\n\n#### 3. Dual Verification (Both)\n- **Highest trust level**: Both systems verify the club\n- **Professional clubs**: Most premier and national level clubs\n- **Gold standard**: Recommended for partnerships and sponsorships\n- **Quality assurance**: Multiple validation layers\n\n### Verification Levels\n1. **Unverified**: New clubs, pending verification\n2. **LigiOpen Verified**: Community-validated grassroots clubs  \n3. **FKF Verified**: Officially registered competitive clubs\n4. **Dual Verified**: Premium verification (both systems)\n\n### Response\n- `clubs`: Array of verified clubs\n- `totalElements`: Total verified clubs\n- `verificationType`: Applied verification filter\n- `currentPage`: Current page number\n- `pageSize`: Results per page\n\n### Use Cases\n- **Sponsorship decisions**: Find trustworthy clubs\n- **Partnership selection**: Verified club partnerships\n- **Tournament organization**: Invite legitimate clubs\n- **Player recruitment**: Focus on verified clubs\n- **Fan engagement**: Follow authentic clubs\n\n### Trust Indicators\n- ‚úÖ **LigiOpen Verified**: Community-validated\n- üèõÔ∏è **FKF Verified**: Officially registered\n- üåü **Dual Verified**: Highest trust level\n\n### Benefits of Verification\n- **Enhanced visibility** in search results\n- **Trust building** with fans and sponsors  \n- **Priority support** from LigiOpen\n- **Access to premium features**\n- **Partnership opportunities**"
							}
						},
						{
							"name": "üü¢ Get All Active Clubs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Active clubs retrieved\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('success');",
											"    pm.expect(jsonData.data).to.have.property('clubs');",
											"});",
											"",
											"console.log('‚úÖ Active clubs retrieved successfully!');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/clubs/active?page=0&size=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"clubs",
										"active"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Page number (0-based)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "Number of results per page"
										}
									]
								},
								"description": "Get all currently active clubs with pagination - the main club discovery endpoint.\n\n### Public Endpoint\n- No authentication required\n- Returns all active clubs in the system\n- Primary endpoint for club browsing and discovery\n\n### Query Parameters\n- `page`: Page number (0-based, default: 0)\n- `size`: Results per page (default: 20, max: 100)\n\n### Active Club Criteria\n- **Profile Complete**: Basic information filled out\n- **Recently Updated**: Activity within last 6 months\n- **Not Suspended**: No administrative restrictions\n- **Verified Status**: At least basic verification completed\n\n### Response\n- `clubs`: Array of active club profiles\n- `totalElements`: Total number of active clubs\n- `currentPage`: Current page number\n- `pageSize`: Results per page\n\n### Club Information Included\n- Basic profile (name, description, colors)\n- Location (county, city, region)\n- Verification status indicators\n- Contact information\n- Formation date and level\n- Logo and media URLs\n\n### Sorting and Ordering\n- **Recently Updated**: Most recently active clubs first\n- **Verification Status**: Verified clubs prioritized\n- **Engagement Level**: Popular clubs ranked higher\n- **Geographic Relevance**: Location-based sorting available\n\n### Use Cases\n- **General club browsing**: Explore available clubs\n- **Discovery interface**: Main club listing page\n- **Mobile app home screen**: Featured clubs\n- **Search base data**: Starting point for filtered searches\n- **Analytics and reporting**: Total active club counts\n\n### Performance\n- **Cached results**: Fast response times\n- **Optimized queries**: Database performance tuned\n- **Mobile optimized**: Lightweight response payload\n- **CDN integration**: Media URLs optimized for loading\n\n### Typical Response Size\n- **20 clubs per page**: Balanced loading time\n- **Basic profile data**: Essential information only\n- **Optimized payload**: ~50KB average response\n- **Image URLs**: Ready for lazy loading\n\n### Integration Notes\n- Perfect for main club listing pages\n- Combine with search filters for advanced discovery\n- Use with infinite scroll or pagination UI\n- Cache responses for better user experience"
							}
						}
					]
				}
			]
		},
		{
			"name": "‚ù§Ô∏è Club Relationships & Favorites",
			"description": "Club favoriting, popularity tracking, and relationship management endpoints.",
			"item": [
				{
					"name": "‚ù§Ô∏è Favorite Club",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"Response has success status\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"console.log('‚úÖ Club favorited successfully!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/favorite",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "favorite"]
						},
						"description": "Add club to user's favorites list."
					}
				},
				{
					"name": "üíî Unfavorite Club",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/favorite",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "favorite"]
						}
					}
				},
				{
					"name": "‚ùì Check Favorite Status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/favorite/status",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "favorite", "status"]
						}
					}
				},
				{
					"name": "üíñ Get My Favorite Clubs",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/favorites/my?page=0&size=10",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "favorites", "my"],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "üë• Get Club Fans",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/favorites?page=0&size=20",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "favorites"],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "üî¢ Get Club Favorite Count",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/favorites/count",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "favorites", "count"]
						}
					}
				},
				{
					"name": "üëë Get Clubs I Own",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/relationships/owned",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "relationships", "owned"]
						}
					}
				},
				{
					"name": "üë®‚Äçüíº Get Clubs I Manage",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/relationships/managed",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "relationships", "managed"]
						}
					}
				},
				{
					"name": "üìã Get Relationship Summary",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/relationships/summary",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "relationships", "summary"]
						}
					}
				},
				{
					"name": "üî• Get Popular Clubs",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/popular?page=0&size=10",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "popular"],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "üí° Get Club Recommendations",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/recommendations?page=0&size=10",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "recommendations"],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "üë• Club Staff Management",
			"description": "Club staff, management, and ownership endpoints including invitations and role management.",
			"item": [
				{
					"name": "‚ûï Add Club Manager",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff/managers/{{manager_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff", "managers", "{{manager_user_id}}"]
						}
					}
				},
				{
					"name": "‚ûñ Remove Club Manager",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff/managers/{{manager_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff", "managers", "{{manager_user_id}}"]
						}
					}
				},
				{
					"name": "üë®‚Äçüíº Get Club Managers",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff/managers",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff", "managers"]
						}
					}
				},
				{
					"name": "üîÑ Transfer Club Ownership",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff/transfer-ownership/{{new_owner_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff", "transfer-ownership", "{{new_owner_id}}"]
						}
					}
				},
				{
					"name": "üìú Get Ownership History",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff/ownership-history",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff", "ownership-history"]
						}
					}
				},
				{
					"name": "üë• Get All Club Staff",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff"]
						}
					}
				},
				{
					"name": "üé≠ Update Manager Role",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role\": \"COACH\",\n    \"permissions\": [\"MANAGE_PLAYERS\", \"VIEW_STATS\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff/managers/{{manager_user_id}}/role",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff", "managers", "{{manager_user_id}}", "role"]
						}
					}
				},
				{
					"name": "üìß Invite Manager",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"manager@example.com\",\n    \"role\": \"MANAGER\",\n    \"message\": \"Welcome to our club management team!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff/managers/invite",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff", "managers", "invite"]
						}
					}
				},
				{
					"name": "‚úÖ Accept Manager Invitation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff/invitations/{{invitation_id}}/accept",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff", "invitations", "{{invitation_id}}", "accept"]
						}
					}
				},
				{
					"name": "‚ùå Decline Manager Invitation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff/invitations/{{invitation_id}}/decline",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff", "invitations", "{{invitation_id}}", "decline"]
						}
					}
				},
				{
					"name": "üìã Get Pending Invitations",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff/invitations/pending",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff", "invitations", "pending"]
						}
					}
				},
				{
					"name": "üóëÔ∏è Cancel Invitation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/clubs/{{club_id}}/staff/invitations/{{invitation_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "clubs", "{{club_id}}", "staff", "invitations", "{{invitation_id}}"]
						}
					}
				}
			]
		},
		{
			"name": "üåç Location & Infrastructure",
			"description": "Sprint 2: Kenya's geographic system including counties, regions, and stadium management for location-based services.",
			"item": [
				{
					"name": "üó∫Ô∏è Get All Kenyan Counties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Counties retrieved successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.equal(47);",
									"});",
									"",
									"console.log('‚úÖ All 47 Kenyan counties retrieved!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/counties",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"counties"
							]
						},
						"description": "Get all 47 Kenyan counties with regional information.\n\n### Public Endpoint\n- No authentication required\n- Returns complete county list\n\n### Response\n- All 47 counties organized by regions:\n  - Central Region (6 counties)\n  - Coast Region (6 counties) \n  - Eastern Region (8 counties)\n  - North Eastern Region (3 counties)\n  - Nyanza Region (6 counties)\n  - Rift Valley Region (14 counties)\n  - Western Region (4 counties)\n\n### Use Cases\n- Club registration county selection\n- Geographic search and filtering\n- Location-based services\n- Regional competition organization"
					}
				},
				{
					"name": "üèüÔ∏è Get Stadiums by County",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stadiums retrieved successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"console.log('‚úÖ County stadiums retrieved!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/counties/1/stadiums",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"counties",
								"1",
								"stadiums"
							]
						},
						"description": "Get all stadiums in a specific county.\n\n### Public Endpoint\n- No authentication required\n- Paginated results\n\n### Path Parameters\n- `countyId`: The ID of the county\n\n### Response\n- List of stadiums in the county\n- Stadium details (capacity, surface, facilities)\n- Geographic coordinates\n- Availability and verification status\n\n### Major Stadiums by County\n- **Nairobi**: Kasarani Stadium (60,000), Nyayo Stadium (30,000)\n- **Mombasa**: Mombasa Municipal Stadium (10,000)\n- **Kisumu**: Moi Stadium Kisumu (35,000)\n- **Nakuru**: Afraha Stadium (8,200)"
					}
				}
			]
		},
		{
			"name": "üîß System & Health Checks",
			"description": "System health checks, API status, and debugging endpoints.",
			"item": [
				{
					"name": "üè• API Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"API is healthy\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response time",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"console.log('‚úÖ API is healthy and responding!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actuator/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Check the health status of the API and its dependencies.\n\n### Public Endpoint\n- No authentication required\n- Always available for monitoring\n\n### Response\n- `status`: Overall health status (UP/DOWN)\n- `components`: Individual component health\n  - Database connectivity\n  - Redis cache status\n  - External service status\n\n### Use Cases\n- System monitoring\n- Load balancer health checks\n- DevOps monitoring\n- Service discovery\n- Uptime monitoring\n\n### Monitoring\n- Use for automated health checks\n- Monitor response time\n- Track service availability\n- Alert on failures"
					}
				}
			]
		},
		{
			"name": "‚öΩ Player Management",
			"description": "Comprehensive player management system for the Kenyan football ecosystem including registration, transfers, and club relationships.",
			"item": [
				{
					"name": "üë§ Player Registration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"dateOfBirth\": \"1995-06-15\",\n    \"nationality\": \"Kenyan\",\n    \"primaryPosition\": \"MIDFIELDER\",\n    \"email\": \"john.doe@example.com\",\n    \"phoneNumber\": \"+254712345678\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/players/registration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"players",
								"registration"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Player registration successful\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"    ",
									"    if (jsonData.data && jsonData.data.id) {",
									"        pm.environment.set('player_id', jsonData.data.id);",
									"        console.log('‚úÖ Player ID stored:', jsonData.data.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "üîç Search Players by Name",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/players/search?query=John&page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"players",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "John"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "üèÉ‚Äç‚ôÇÔ∏è Get Players by Position",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/players/position/MIDFIELDER?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"players",
								"position",
								"MIDFIELDER"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "üåç Get Players by Nationality",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/players/nationality/Kenyan?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"players",
								"nationality",
								"Kenyan"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "üë¶ Get Players by Age Range",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/players/age-range?minAge=18&maxAge=35&page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"players",
								"age-range"
							],
							"query": [
								{
									"key": "minAge",
									"value": "18"
								},
								{
									"key": "maxAge",
									"value": "35"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "ü¶∂ Get Players by Preferred Foot",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/players/preferred-foot/RIGHT?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"players",
								"preferred-foot",
								"RIGHT"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "üìè Get Players by Height Range",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/players/height-range?minHeight=165.0&maxHeight=190.0&page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"players",
								"height-range"
							],
							"query": [
								{
									"key": "minHeight",
									"value": "165.0"
								},
								{
									"key": "maxHeight",
									"value": "190.0"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "üèõÔ∏è Get Players by Club",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/players/club/{{club_id}}?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"players",
								"club",
								"{{club_id}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "üÜì Get Free Agents",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/players/free-agents?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"players",
								"free-agents"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "üì∏ Upload Player Main Photo",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "photoFile",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/players/{{player_id}}/main-photo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"players",
								"{{player_id}}",
								"main-photo"
							]
						}
					}
				}
			]
		},
		{
			"name": "üîÑ Transfer Management",
			"description": "Player transfer system managing requests, approvals, and completions between clubs.",
			"item": [
				{
					"name": "üìù Create Transfer Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"playerId\": {{player_id}},\n    \"fromClubId\": {{club_id}},\n    \"toClubId\": {{fkf_club_id}},\n    \"transferType\": \"PERMANENT\",\n    \"contractType\": \"PROFESSIONAL\",\n    \"transferFee\": 500000.00,\n    \"proposedSalary\": 50000.00,\n    \"contractDuration\": 24,\n    \"notes\": \"Urgent transfer needed for upcoming season\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transfers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transfers"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Transfer request created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"    ",
									"    if (jsonData.data && jsonData.data.id) {",
									"        pm.environment.set('transfer_id', jsonData.data.id);",
									"        console.log('‚úÖ Transfer ID stored:', jsonData.data.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "‚úÖ Approve Transfer",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/transfers/{{transfer_id}}/approve",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transfers",
								"{{transfer_id}}",
								"approve"
							]
						}
					}
				},
				{
					"name": "‚ùå Reject Transfer",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/transfers/{{transfer_id}}/reject?reason=Player does not meet club requirements",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transfers",
								"{{transfer_id}}",
								"reject"
							],
							"query": [
								{
									"key": "reason",
									"value": "Player does not meet club requirements"
								}
							]
						}
					}
				},
				{
					"name": "üèÅ Complete Transfer",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/transfers/{{transfer_id}}/complete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transfers",
								"{{transfer_id}}",
								"complete"
							]
						}
					}
				},
				{
					"name": "üìä Get Club Transfer Statistics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/transfers/club/{{club_id}}/statistics",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transfers",
								"club",
								"{{club_id}}",
								"statistics"
							]
						}
					}
				},
				{
					"name": "üî• Get Recent Transfers",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/transfers/recent?limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transfers",
								"recent"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "üí∞ Get High-Value Transfers",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/transfers/high-value?minimumValue=100000&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transfers",
								"high-value"
							],
							"query": [
								{
									"key": "minimumValue",
									"value": "100000"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-set base URL if not present",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8000');",
					"    console.log('üîß Base URL set to default: http://localhost:8000');",
					"}",
					"",
					"// Log current request info",
					"console.log('üöÄ Making request to:', pm.request.url.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global response time test",
					"pm.test(\"Response time is reasonable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Log response info",
					"console.log('üìä Response Status:', pm.response.code, pm.response.status);",
					"console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "Base URL for the LigiOpen API"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string",
			"description": "JWT access token for authentication (auto-populated after login)"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string",
			"description": "Refresh token for JWT renewal (auto-populated after login)"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string",
			"description": "Current user's ID (auto-populated after login)"
		},
		{
			"key": "user_email",
			"value": "",
			"type": "string",
			"description": "Current user's email (auto-populated after login)"
		},
		{
			"key": "club_id",
			"value": "",
			"type": "string",
			"description": "Club ID for testing (auto-populated after club registration)"
		},
		{
			"key": "fkf_club_id",
			"value": "",
			"type": "string",
			"description": "FKF Club ID for testing (auto-populated after FKF club registration)"
		},
		{
			"key": "county_id",
			"value": "1",
			"type": "string",
			"description": "County ID for location testing (default: Nairobi = 1)"
		},
		{
			"key": "manager_user_id",
			"value": "",
			"type": "string",
			"description": "Manager User ID for staff management testing"
		},
		{
			"key": "stadium_id",
			"value": "1",
			"type": "string",
			"description": "Stadium ID for club location testing (default: sample stadium)"
		},
		{
			"key": "invitation_id",
			"value": "",
			"type": "string",
			"description": "Invitation ID for staff invitation testing (auto-populated)"
		},
		{
			"key": "nairobi_latitude",
			"value": "-1.286389",
			"type": "string",
			"description": "Nairobi CBD latitude for location-based search testing"
		},
		{
			"key": "nairobi_longitude",
			"value": "36.817223",
			"type": "string",
			"description": "Nairobi CBD longitude for location-based search testing"
		},
		{
			"key": "fkf_registration_number",
			"value": "",
			"type": "string",
			"description": "FKF registration number for testing (auto-populated or manual)"
		},
		{
			"key": "player_id",
			"value": "",
			"type": "string",
			"description": "Player ID for testing (auto-populated after player registration)"
		},
		{
			"key": "transfer_id",
			"value": "",
			"type": "string",
			"description": "Transfer ID for testing (auto-populated after transfer request creation)"
		}
	]
}